stages:
  Input:
    actors:
      PopulationArgs:
        parent: PopulationArgs
        readonly: true
        in:
          {{#each PARENT_TABLE_DATA~}}
          {{getInputFieldName this}}:
            external: {{getInputFieldName this}}
            schema: any
          {{/each}}
      SyncDeleteMode:
        parent: SyncDeleteMode
        in:
          interface:
            schema: any
          table:
            const: null
            external: table
  Parent Rows Mapper:
    actors:
      BqParentRowsMapper:
        parent: LuFunction
        in:
          functionName:
            const: bqParentRowsMapper
          lu:
            external: schema
            schema: string
            mandatory: false
          table:
            external: table
            schema: string
            mandatory: false
          parentRows:
            link: PopulationArgs/parent_rows
            schema: '#ref'
            mandatory: false
        out:
          result:
            schema: '#ref'
  Source:
    actors:
      Query:
        parent: SourceDbQuery
        in:
          interface:
            const: {{TARGET_INTERFACE}}
          sql:
            const: |-
              Select {{#each Columns~}} {{getDeleleColumnName this}}{{#if @last}}{{else}}  ,  {{/if}}{{/each}}
              From `$projectId.{{{TARGET_SCHEMA}}}.{{{OriginalTableName}}}`
          parent_rows:
            link: BqParentRowsMapper/result
        out:
          result:
            schema: '#ref'
  Stage 1: {}
  LU Table:
    last: 1
    actors:
      {{{TableName}}}:
        parent: DbLoad
        in:
          interface:
            const: fabric
          schema:
            const: null
            external: schema
          table:
            const: null
            external: table
          fields:
            const:
            {{#each Columns~}}
            - {{getDeleleColumnName this}}
            {{/each}}
          dialect:
            const: sqlite
          {{#each Columns~}}
          {{getDeleleColumnName this}}:
            schema: any
          {{/each}}
          params:
            link:
              path: Query/result
              iterate: Iterate
  Post Load: {}
schemas:
  BqParentRowsMapper.in.parentRows:
    type: array
    items:
      type: object
  BqParentRowsMapper.out.result:
    type: array
    items:
      type: object
  Query.out.result:
    type: object
    properties: {}
